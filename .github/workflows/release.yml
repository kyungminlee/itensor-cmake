name: build-test-deploy
on: [push, pull_request]
jobs:
  config:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract-version.outputs.result }}
    steps:
    - name: Extract version
      uses: actions/github-script@v3
      id: extract-version
      with:
        script: |
          if (context.ref.startsWith("refs/tags/")) {
            return context.ref.replace(/refs\/tags\//, '');
          } else {
            return context.sha.substring(0, 6);
          }
        result-encoding: string
  
  build:
    strategy:
      matrix:
        include:
        - { os: ubuntu-latest,  BLA_VENDOR: OpenBLAS, platform: ubuntu,  asset_ext: tgz, test_target: test }
        - { os: ubuntu-latest,  BLA_VENDOR: Generic,  platform: ubuntu,  asset_ext: tgz, test_target: test }
        - { os: macos-latest,   BLA_VENDOR: Apple,    platform: macos,   asset_ext: tgz, test_target: test }
        - { os: windows-latest, BLA_VENDOR: OpenBLAS, platform: windows, asset_ext: zip, test_target: RUN_TESTS }
    needs: config
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Check out submodule
      run: git submodule update --init
    - name: Install OpenBLAS
      if: ${{ startsWith(matrix.os, 'ubuntu') && matrix.BLA_VENDOR == 'OpenBLAS' }}
      run: sudo apt-get install libopenblas-dev liblapacke-dev
    - name: Install LAPACK
      if: ${{ matrix.os == 'ubuntu-latest' && matrix.BLA_VENDOR == 'Generic' }}
      run: sudo apt-get install liblapack-dev liblapacke-dev
  
    - name: Make CMake build directory
      run: cmake -B build -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/itensor-${{ needs.config.outputs.version }} -DBLA_VENDOR=${{ matrix.BLA_VENDOR }}

    - name: Build Debug
      run: cmake --build build --config Debug
    - name: Test Debug
      run: cmake --build build --target ${{ matrix.test_target }} --config Debug

    - name: Build Release
      run: cmake --build build --config Release
    - name: Test Release
      run: cmake --build build --target ${{ matrix.test_target }} --config Release

    - name: Install Release
      run: cmake --build build --target install --config Release
    - name: Package (tgz)
      if: ${{ !startsWith(matrix.os, 'windows') }}
      run: |
        tar cvzf itensor-${{ needs.config.outputs.version }}-${{ matrix.BLA_VENDOR }}-${{ matrix.platform }}-x86_64.${{ matrix.asset_ext }} -C ${{ github.workspace }} itensor-${{ needs.config.outputs.version }}
    - name: Package (zip)
      if: ${{ startsWith(matrix.os, 'windows') }}
      run: |
        7z a itensor-${{ needs.config.outputs.version }}-${{ matrix.BLA_VENDOR }}-${{ matrix.platform }}-x86_64.${{ matrix.asset_ext }} ${{ github.workspace }}\itensor-${{ needs.config.outputs.version }}
    - name: Upload Artifact
      if: ${{ github.event_name == 'push' }}
      uses: actions/upload-artifact@v2
      with:
        name: itensor-${{ needs.config.outputs.version }}-${{ matrix.BLA_VENDOR }}-${{ matrix.platform }}-x86_64.${{ matrix.asset_ext }}
        path: itensor-${{ needs.config.outputs.version }}-${{ matrix.BLA_VENDOR }}-${{ matrix.platform }}-x86_64.${{ matrix.asset_ext }}
        retention-days: 3

  create_release:
    name: Create Release
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    needs: [config, build]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ needs.config.outputs.version }}
        draft: true
        prerelease: false

  release:
    name: Upload zip Release
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}
    strategy:
      matrix:
        include:
        - { os: ubuntu-latest,  BLA_VENDOR: OpenBLAS, platform: ubuntu,  asset_ext: tgz }
        - { os: ubuntu-latest,  BLA_VENDOR: Generic,  platform: ubuntu,  asset_ext: tgz }
        - { os: macos-latest,   BLA_VENDOR: Apple,    platform: macos,   asset_ext: tgz }
        - { os: windows-latest, BLA_VENDOR: OpenBLAS, platform: windows, asset_ext: zip }
    needs: [config, create_release, build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: itensor-${{ needs.config.outputs.version }}-${{ matrix.BLA_VENDOR }}-${{ matrix.platform }}-x86_64.${{ matrix.asset_ext }}
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}        
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: itensor-${{ needs.config.outputs.version }}-${{ matrix.BLA_VENDOR }}-${{ matrix.platform }}-x86_64.${{ matrix.asset_ext }}
        asset_name: itensor-${{ needs.config.outputs.version }}-${{ matrix.BLA_VENDOR }}-${{ matrix.platform }}-x86_64.${{ matrix.asset_ext }}
        asset_content_type: application/${{ matrix.asset_ext }}

  release-deb:
    name: Upload deb Release
    if: ${{ github.event_name == 'push' }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            BLA_VENDOR: OpenBLAS
            platform: ubuntu
    needs: [config, create_release, build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: itensor-${{ needs.config.outputs.version }}-${{ matrix.BLA_VENDOR }}-${{ matrix.platform }}-x86_64.tgz
    - name: List
      run: |
        tar xvzf itensor-${{ needs.config.outputs.version }}-${{ matrix.BLA_VENDOR }}-${{ matrix.platform }}-x86_64.tgz -C ${{ github.workspace }}
        mv ${{ github.workspace }}/itensor-${{ needs.config.outputs.version }} ${{ github.workspace }}/installdir
    - name: Create DEB configuration
      run: |
        mkdir -p ${{ github.workspace }}/installdir/DEBIAN
        cat > ${{ github.workspace }}/installdir/DEBIAN/control <<EOS
        Package: libitensor-dev
        Version: 3.1.5
        Section: science
        Priority: optional
        Architecture: amd64
        Essential: no
        Depends: liblapacke-dev, libopenblas-dev
        Maintainer: Kyungmin Lee <kyungmin.lee.42@gmail.com>
        Description: ITensor is a library for implementing tensor network calculations.
        EOS
    - name: Package (deb)
      run: dpkg-deb --build ${{ github.workspace }}/installdir libitensor-dev_${{ needs.config.outputs.version }}_amd64.deb
    - uses: actions/upload-artifact@v2
      with:
        name: libitensor-dev_${{ needs.config.outputs.version }}_amd64.deb
        path: libitensor-dev_${{ needs.config.outputs.version }}_amd64.deb
    - name: Upload Release Asset
      id: upload-release-asset 
      if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}        
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: libitensor-dev_${{ needs.config.outputs.version }}_amd64.deb
        asset_name: libitensor-dev_${{ needs.config.outputs.version }}_amd64.deb
        asset_content_type: application/vnd.debian.binary-package